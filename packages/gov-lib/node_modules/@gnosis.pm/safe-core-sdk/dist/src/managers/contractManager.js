"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ContractManager_safeContract, _ContractManager_multiSendContract;
Object.defineProperty(exports, "__esModule", { value: true });
const MultiSendAbi_json_1 = __importDefault(require("../abis/MultiSendAbi.json"));
const SafeAbiV1_2_0_json_1 = __importDefault(require("../abis/SafeAbiV1-2-0.json"));
const contracts_1 = require("../configuration/contracts");
class ContractManager {
    constructor() {
        _ContractManager_safeContract.set(this, void 0);
        _ContractManager_multiSendContract.set(this, void 0);
    }
    static async create(ethers, safeAddress, chainId, currentProviderOrSigner, provider, contractNetworks) {
        const safeSdk = new ContractManager();
        await safeSdk.init(ethers, safeAddress, chainId, currentProviderOrSigner, provider, contractNetworks);
        return safeSdk;
    }
    async init(ethers, safeAddress, chainId, currentProviderOrSigner, provider, contractNetworks) {
        const contractNetworksConfig = { ...contracts_1.defaultContractNetworks, ...contractNetworks };
        const contracts = contractNetworksConfig[chainId];
        if (!contracts) {
            throw new Error('Safe contracts not found in the current network');
        }
        const safeContractCode = await provider.getCode(safeAddress);
        if (safeContractCode === '0x') {
            throw new Error('Safe Proxy contract is not deployed in the current network');
        }
        __classPrivateFieldSet(this, _ContractManager_safeContract, new ethers.Contract(safeAddress, SafeAbiV1_2_0_json_1.default, currentProviderOrSigner), "f");
        const multiSendContractCode = await provider.getCode(contracts.multiSendAddress);
        if (multiSendContractCode === '0x') {
            throw new Error('MultiSend contract is not deployed in the current network');
        }
        __classPrivateFieldSet(this, _ContractManager_multiSendContract, new ethers.Contract(contracts.multiSendAddress, MultiSendAbi_json_1.default, currentProviderOrSigner), "f");
    }
    get safeContract() {
        return __classPrivateFieldGet(this, _ContractManager_safeContract, "f");
    }
    get multiSendContract() {
        return __classPrivateFieldGet(this, _ContractManager_multiSendContract, "f");
    }
}
_ContractManager_safeContract = new WeakMap(), _ContractManager_multiSendContract = new WeakMap();
exports.default = ContractManager;
//# sourceMappingURL=contractManager.js.map
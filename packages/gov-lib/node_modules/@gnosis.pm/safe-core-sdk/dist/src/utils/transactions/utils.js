"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeMultiSendData = exports.standardizeSafeTransactionData = exports.standardizeMetaTransactionData = void 0;
const safe_core_sdk_types_1 = require("@gnosis.pm/safe-core-sdk-types");
const ethers_1 = require("ethers");
const constants_1 = require("../constants");
const gas_1 = require("./gas");
function standardizeMetaTransactionData(tx) {
    var _a;
    const standardizedTxs = {
        to: tx.to,
        value: tx.value,
        data: tx.data,
        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call
    };
    return standardizedTxs;
}
exports.standardizeMetaTransactionData = standardizeMetaTransactionData;
async function standardizeSafeTransactionData(safeContract, tx) {
    var _a, _b, _c, _d, _e;
    const standardizedTxs = {
        to: tx.to,
        value: tx.value,
        data: tx.data,
        operation: (_a = tx.operation) !== null && _a !== void 0 ? _a : safe_core_sdk_types_1.OperationType.Call,
        baseGas: (_b = tx.baseGas) !== null && _b !== void 0 ? _b : 0,
        gasPrice: (_c = tx.gasPrice) !== null && _c !== void 0 ? _c : 0,
        gasToken: tx.gasToken || constants_1.ZERO_ADDRESS,
        refundReceiver: tx.refundReceiver || constants_1.ZERO_ADDRESS,
        nonce: (_d = tx.nonce) !== null && _d !== void 0 ? _d : (await safeContract.nonce()).toNumber()
    };
    const safeTxGas = (_e = tx.safeTxGas) !== null && _e !== void 0 ? _e : (await gas_1.estimateTxGas(safeContract, standardizedTxs.to, standardizedTxs.value, standardizedTxs.data, standardizedTxs.operation));
    return {
        ...standardizedTxs,
        safeTxGas
    };
}
exports.standardizeSafeTransactionData = standardizeSafeTransactionData;
function encodeMetaTransaction(tx) {
    const data = ethers_1.utils.arrayify(tx.data);
    const encoded = ethers_1.utils.solidityPack(['uint8', 'address', 'uint256', 'uint256', 'bytes'], [tx.operation, tx.to, tx.value, data.length, data]);
    return encoded.slice(2);
}
function encodeMultiSendData(txs) {
    return '0x' + txs.map((tx) => encodeMetaTransaction(tx)).join('');
}
exports.encodeMultiSendData = encodeMultiSendData;
//# sourceMappingURL=utils.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var transaction_service_1 = require("./lib/services/transaction-service");
var utils_1 = require("./lib/utils");
/**
 * The Proposal object is the interface for interacting with any Proposals.
 * Can be gotten via the Pod object, through {@link Pod.getProposals}.
 */
var Proposal = /** @class */ (function () {
    /**
     * Transforms a Safe Transaction object into one of our Proposals.
     * @param safeTransaction
     * @param rejectTransaction - Optional reject transaction
     */
    function Proposal(Pod, podNonce, safeTransaction, rejectTransaction) {
        var _this = this;
        /**
         * Votes to approve the proposal
         * @param signer - Signer of pod member
         * @throws If signer already approved proposal
         * @throws If signer is not a pod member
         * @throws If there was an error approving Proposal
         */
        this.approve = function (signer) { return __awaiter(_this, void 0, void 0, function () {
            var signerAddress, _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.checkAddress;
                        return [4 /*yield*/, signer.getAddress()];
                    case 1:
                        signerAddress = _a.apply(void 0, [_b.sent()]);
                        if (this.approvals.includes(signerAddress)) {
                            throw new Error('Signer has already approved this proposal');
                        }
                        return [4 /*yield*/, this.pod.isMember(signerAddress)];
                    case 2:
                        if (!(_b.sent())) {
                            throw new Error('Signer was not part of this pod');
                        }
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, (0, transaction_service_1.approveSafeTransaction)(this.safeTransaction, signer)];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _b.sent();
                        throw new Error("Error approving Proposal: ".concat(err_1.message));
                    case 6:
                        this.approvals.push(signerAddress);
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * Votes to reject the proposal
         * @param signer - Signer of pod member
         * @throws If signer has already rejected proposal
         * @throws If signer was not pod member
         * @throws If error rejecting proposal
         */
        this.reject = function (signer) { return __awaiter(_this, void 0, void 0, function () {
            var signerAddress, _a, _b, err_2;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = utils_1.checkAddress;
                        return [4 /*yield*/, signer.getAddress()];
                    case 1:
                        signerAddress = _a.apply(void 0, [_c.sent()]);
                        if (this.rejections.includes(signerAddress)) {
                            throw new Error('Signer has already rejected this proposal');
                        }
                        return [4 /*yield*/, this.pod.isMember(signerAddress)];
                    case 2:
                        if (!(_c.sent())) {
                            throw new Error('Signer was not part of this pod');
                        }
                        if (!!this.rejectTransaction) return [3 /*break*/, 4];
                        _b = this;
                        return [4 /*yield*/, (0, transaction_service_1.createRejectTransaction)(this.safeTransaction, signer)];
                    case 3:
                        _b.rejectTransaction = _c.sent();
                        return [3 /*break*/, 7];
                    case 4:
                        _c.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, (0, transaction_service_1.approveSafeTransaction)(this.rejectTransaction, signer)];
                    case 5:
                        _c.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        err_2 = _c.sent();
                        throw new Error("Error rejecting Proposal: ".concat(err_2.message));
                    case 7:
                        this.rejections.push(signerAddress);
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * Executes proposal
         * @param signer - Signer of pod member
         * @throws If not enough approvals to execute
         * @throws If signer was not part of the pod
         */
        this.executeApprove = function (signer) { return __awaiter(_this, void 0, void 0, function () {
            var signerAddress, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = utils_1.checkAddress;
                        return [4 /*yield*/, signer.getAddress()];
                    case 1:
                        signerAddress = _a.apply(void 0, [_b.sent()]);
                        if (this.approvals.length !== this.threshold) {
                            throw new Error('Not enough approvals to execute');
                        }
                        return [4 /*yield*/, this.pod.isMember(signerAddress)];
                    case 2:
                        if (!(_b.sent())) {
                            throw new Error('Signer was not part of this pod');
                        }
                        return [2 /*return*/, (0, transaction_service_1.executeSafeTransaction)(this.safeTransaction, signer)];
                }
            });
        }); };
        this.pod = Pod;
        this.id = safeTransaction.nonce;
        this.timestamp = new Date(safeTransaction.submissionDate);
        this.value = safeTransaction.value;
        this.threshold = safeTransaction.confirmationsRequired
            ? safeTransaction.confirmationsRequired
            : this.pod.threshold;
        this.safeTransaction = safeTransaction;
        this.rejectTransaction = rejectTransaction;
        if (podNonce === this.id)
            this.status = 'active';
        if (podNonce > this.id)
            this.status = 'executed';
        if (podNonce < this.id)
            this.status = 'queued';
        this.approvals = safeTransaction.confirmations.map(function (confirmation) { return confirmation.owner; });
        if (rejectTransaction) {
            this.rejections = rejectTransaction.confirmations.map(function (confirmation) { return confirmation.owner; });
        }
        else {
            this.rejections = [];
        }
        if (safeTransaction.dataDecoded) {
            this.method = safeTransaction.dataDecoded.method;
            this.parameters = safeTransaction.dataDecoded.parameters;
        }
        else {
            this.method = null;
            this.parameters = null;
        }
    }
    return Proposal;
}());
exports["default"] = Proposal;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.getPreviousModule = exports.signMessage = exports.encodeFunctionData = exports.handleEthersError = exports.checkAddress = exports.getContract = void 0;
var ethers_1 = require("ethers");
var contracts_1 = require("@orcaprotocol/contracts");
// These fetch the rinkeby deployments, but we just need the ABIs so it's irrelevant where we're fetching from.
var MemberToken_json_1 = __importDefault(require("@orcaprotocol/contracts/deployments/rinkeby/MemberToken.json"));
var safe_deployments_1 = require("@gnosis.pm/safe-deployments");
var config_1 = require("../config");
// Mapping contractNames to JSONs
var contractJsons = {
    MemberToken: MemberToken_json_1["default"]
};
var GnosisSafe = (0, safe_deployments_1.getSafeSingletonDeployment)({ version: '1.3.0' });
/**
 * Returns ethers contract based on name
 * @param contractName
 * @param signer
 * @returns
 */
function getContract(contractName, signer) {
    var contractJson = (0, contracts_1.getDeployment)(contractName, config_1.config.network);
    if (!contractJson)
        throw new RangeError("Contract ABI could not be found for ".concat(contractName));
    return new ethers_1.ethers.Contract(contractJson.address, contractJson.abi, signer);
}
exports.getContract = getContract;
/**
 * Checks to see if an address is valid (checksum or not)
 * @param address
 * @returns
 */
function checkAddress(address) {
    try {
        return ethers_1.ethers.utils.getAddress(address);
    }
    catch (_a) {
        throw new TypeError("Invalid address provided: ".concat(address));
    }
}
exports.checkAddress = checkAddress;
/**
 * Handles ethers errors, as they have non-standard error formats.
 * @param error
 */
var handleEthersError = function (error) {
    if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {
        throw new Error(error.error.message);
    }
    else {
        throw new Error(error.message);
    }
};
exports.handleEthersError = handleEthersError;
/**
 * Given contracts that we support, returns the encoded function data
 * @param contractName Name of contract, i.e., "ERC20". You can also use "IERC20" when relevant
 * @param functionName Name of function as it appears on the ABI, i.e., 'transfer'
 * @param args Args of function in an array.
 * @returns
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function encodeFunctionData(contractName, functionName, args) {
    var contractJson = contractJsons[contractName];
    if (!contractJson)
        throw new RangeError("Contract ABI could not be found for ".concat(contractName));
    return new ethers_1.ethers.utils.Interface(contractJson.abi).encodeFunctionData(functionName, args);
}
exports.encodeFunctionData = encodeFunctionData;
/**
 * Signs a message using ethers wallet and a local private key.
 * @param contractTransactionHash - Generated safe's transaction hash in the format of 0x...
 * @param signer
 * @returns Signed message based on private key.
 */
function signMessage(contractTransactionHash, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var signedMessage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, signer.signMessage(ethers_1.ethers.utils.arrayify(contractTransactionHash))];
                case 1:
                    signedMessage = _a.sent();
                    // Reference: https://github.com/gnosis/safe-contracts/blob/main/src/utils/execution.ts#L102
                    return [2 /*return*/, signedMessage.replace(/1b$/, '1f').replace(/1c$/, '20')];
            }
        });
    });
}
exports.signMessage = signMessage;
/**
 * Gets the previous Controller module from the safe contract.
 * @param safe - Safe address
 * @param oldController - Old controller address
 * @param newController - New controller address
 * @param signer
 * @returns
 */
function getPreviousModule(safe, oldController, newController, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var safeContract, AddressOne, temp, safeModules, oldIndex, previousModule;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    safeContract = new ethers_1.ethers.Contract(safe, GnosisSafe.abi, signer);
                    AddressOne = '0x0000000000000000000000000000000000000001';
                    return [4 /*yield*/, safeContract.getModulesPaginated(AddressOne, 10)];
                case 1:
                    temp = _a.sent();
                    safeModules = temp.array ? temp.array : temp;
                    if (safeModules.includes(ethers_1.ethers.utils.getAddress(newController)))
                        throw new Error('Pod is already on latest version');
                    oldIndex = safeModules.indexOf(ethers_1.ethers.utils.getAddress(oldController));
                    previousModule = safeModules.length === 1 || oldIndex === 0 ? newController : safeModules[oldIndex - 1];
                    if (!previousModule)
                        throw new Error('Error parsing old modules');
                    return [2 /*return*/, previousModule];
            }
        });
    });
}
exports.getPreviousModule = getPreviousModule;

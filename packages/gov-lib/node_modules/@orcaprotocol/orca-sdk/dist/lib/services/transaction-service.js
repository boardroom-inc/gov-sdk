"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.executeSafeTransaction = exports.createRejectTransaction = exports.createSafeTransaction = exports.approveSafeTransaction = exports.getSafeTransactionByHash = exports.getSafeTransactionsBySafe = exports.addConfirmationToSafeTransaction = exports.submitSafeTransactionToService = exports.getSafeTxHash = exports.getGasEstimation = exports.getSafeInfo = exports.populateDataDecoded = exports.parseTransaction = void 0;
var axios_1 = __importDefault(require("axios"));
var ethers_1 = require("ethers");
var safe_deployments_1 = require("@gnosis.pm/safe-deployments");
var config_1 = require("../../config");
var etherscan_1 = require("./etherscan");
var utils_1 = require("../utils");
// used to checksum addresses
var getAddress = ethers_1.ethers.utils.getAddress;
var GnosisSafe = (0, safe_deployments_1.getSafeSingletonDeployment)({ version: process.env.GNOSIS_SAFE_VERSION });
/**
 * Decodes transaction given an ABI and the data and parses it to match Gnosis's dataDecoded field
 * @param abi
 * @param data
 * @returns
 */
function parseTransaction(abi, data) {
    var _a = new ethers_1.ethers.utils.Interface(abi).parseTransaction({
        data: data
    }), name = _a.name, args = _a.args, inputs = _a.functionFragment.inputs;
    var parameters = inputs.map(function (input, index) {
        var value = args[index];
        if (ethers_1.BigNumber.isBigNumber(value)) {
            value = value.toString();
        }
        return {
            name: input.name,
            type: input.type,
            value: value
        };
    });
    return {
        method: name,
        parameters: parameters
    };
}
exports.parseTransaction = parseTransaction;
/**
 * Populates the "dataDecoded" field of a transaction, if one does not exist.
 * @param transaction
 */
function populateDataDecoded(safeTransaction) {
    return __awaiter(this, void 0, void 0, function () {
        var abi, dataDecoded;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // No data to decode, or was already provided the decoded data
                    if (safeTransaction.dataDecoded ||
                        safeTransaction.data == null ||
                        safeTransaction.data === ethers_1.ethers.constants.HashZero)
                        return [2 /*return*/, safeTransaction];
                    return [4 /*yield*/, (0, etherscan_1.lookupContractAbi)(safeTransaction.to)];
                case 1:
                    abi = _a.sent();
                    dataDecoded = abi ? parseTransaction(abi, safeTransaction.data) : null;
                    return [2 /*return*/, __assign(__assign({}, safeTransaction), { dataDecoded: dataDecoded })];
            }
        });
    });
}
exports.populateDataDecoded = populateDataDecoded;
/**
 * Gets safe info from transaction service.
 *
 * @param address - Address of the Safe.
 * @returns - Safe data.
 */
function getSafeInfo(address) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1["default"].get("".concat(config_1.config.gnosisUrl, "/safes/").concat(getAddress(address)))];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.data];
            }
        });
    });
}
exports.getSafeInfo = getSafeInfo;
/**
 * Gets the gas estimation for a given transaction.
 *
 * @param transaction - Transaction object.
 * @returns - Gas
 */
function getGasEstimation(transaction) {
    return __awaiter(this, void 0, void 0, function () {
        var url, data, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "".concat(config_1.config.gnosisUrl, "/safes/").concat(getAddress(transaction.safe), "/multisig-transactions/estimations/");
                    data = {
                        to: getAddress(transaction.to),
                        value: transaction.value || 0,
                        data: transaction.data || ethers_1.ethers.constants.HashZero,
                        operation: transaction.operation || 1
                    };
                    return [4 /*yield*/, axios_1["default"].post(url, data)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.data.safeTxGas];
            }
        });
    });
}
exports.getGasEstimation = getGasEstimation;
/**
 * Asks the transaction service what the real transaction should be. Feeding an
 * incorrect transaction hash to the service has it spit back the real one.
 *
 * NOTE: This isn't really safe, we should look into asking the contract later.
 *
 * @param transaction - Transaction object that is missing a contractTransactionHash.
 * @returns - Safe transaction hash.
 */
function getSafeTxHash(transaction) {
    return __awaiter(this, void 0, void 0, function () {
        var contractTransactionHash, url, err_1, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (transaction.safeTxHash)
                        throw new Error('Unexpected contractTransactionHash at getContractTransactionHash');
                    url = "".concat(config_1.config.gnosisUrl, "/safes/").concat(getAddress(transaction.safe), "/multisig-transactions/");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    // Sending the transaction service a made up transaction hash causes it to
                    // send back an error with the actual transaction hash, so we'll do that and grab that.
                    return [4 /*yield*/, axios_1["default"].post(url, __assign({ contractTransactionHash: '0xd112233445566778899aabbccddff00000000000000000000000000000000000', signature: '0x000000000000000000000000a935484ba4250c446779d4703f1598dc2ea00d12000000000000000000000000000000000000000000000000000000000000000001' }, transaction))];
                case 2:
                    // Sending the transaction service a made up transaction hash causes it to
                    // send back an error with the actual transaction hash, so we'll do that and grab that.
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    result = err_1.response.data.nonFieldErrors;
                    contractTransactionHash = result[0].match(/0x\S+/)[0];
                    return [3 /*break*/, 4];
                case 4:
                    if (!contractTransactionHash) {
                        throw new Error('Failed to receive contractTransactionHash from transaction service');
                    }
                    return [2 /*return*/, contractTransactionHash];
            }
        });
    });
}
exports.getSafeTxHash = getSafeTxHash;
/**
 * Submits a new transaction to the transaction-service.
 *
 * @param {string} safeAddress - Address of Safe.
 * @param {Transaction} transaction - Transaction object received from populateTransaction.
 * @returns
 */
function submitSafeTransactionToService(transaction) {
    return __awaiter(this, void 0, void 0, function () {
        var url, result, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "".concat(config_1.config.gnosisUrl, "/safes/").concat(getAddress(transaction.safe), "/multisig-transactions/");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, axios_1["default"].post(url, __assign({ 
                            // Transaction Service names it contractTransactionHash only for this call
                            contractTransactionHash: transaction.safeTxHash }, transaction))];
                case 2:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_2 = _a.sent();
                    // do nothing?
                    return [2 /*return*/, null];
                case 4: return [2 /*return*/, JSON.parse(result.config.data)];
            }
        });
    });
}
exports.submitSafeTransactionToService = submitSafeTransactionToService;
/**
 * Adds a confirmation/signature to an existing transaction (see submitTransactionToService).
 *
 * @param contractTransactionHash - ...
 * @param signedMessage - ...
 * @returns - Confirmed transaction.
 */
function addConfirmationToSafeTransaction(contractTransactionHash, signedMessage) {
    return __awaiter(this, void 0, void 0, function () {
        var url, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "".concat(config_1.config.gnosisUrl, "/multisig-transactions/").concat(contractTransactionHash, "/confirmations/");
                    return [4 /*yield*/, axios_1["default"].post(url, { signature: signedMessage })];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.data];
            }
        });
    });
}
exports.addConfirmationToSafeTransaction = addConfirmationToSafeTransaction;
/**
 * Gets transactions for a safe.
 *
 * @param address - Address of the Safe.
 * @param [params] - Query params.
 * @returns - Array of transactions for the Safe.
 */
function getSafeTransactionsBySafe(address, params) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, axios_1["default"].get("".concat(config_1.config.gnosisUrl, "/safes/").concat(getAddress(address), "/multisig-transactions"), {
                        params: params
                    })];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.data.results];
            }
        });
    });
}
exports.getSafeTransactionsBySafe = getSafeTransactionsBySafe;
/**
 * Gets a transaction from the transaction service.
 *
 * @param contractTransactionHash
 * @returns - Safe transaction object.
 */
function getSafeTransactionByHash(contractTransactionHash) {
    return __awaiter(this, void 0, void 0, function () {
        var url, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "".concat(config_1.config.gnosisUrl, "/multisig-transactions/").concat(contractTransactionHash);
                    return [4 /*yield*/, axios_1["default"].get(url)];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.data];
            }
        });
    });
}
exports.getSafeTransactionByHash = getSafeTransactionByHash;
/**
 * Approves transaction and submits approval to transaction-service
 * @param safeTransaction {SafeTransaction}
 * @param signer {ethers.Signer}
 */
function approveSafeTransaction(safeTransaction, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var safeTxHash, signedHash, confirmationInApprove;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    safeTxHash = safeTransaction.safeTxHash;
                    return [4 /*yield*/, (0, utils_1.signMessage)(safeTxHash, signer)];
                case 1:
                    signedHash = _a.sent();
                    return [4 /*yield*/, addConfirmationToSafeTransaction(safeTxHash, signedHash)];
                case 2:
                    confirmationInApprove = _a.sent();
                    return [2 /*return*/, confirmationInApprove];
            }
        });
    });
}
exports.approveSafeTransaction = approveSafeTransaction;
/**
 * Creates safe transaction
 * @param input.safe - Address of Gnosis safe
 * @param input.to - Smart contract address (i.e., MemberToken)
 * @param input.value - Value to send
 * @param input.data - Transaction data
 * @param input.sender - Address that is initiating the transaction
 * @returns {SafeTransaction}
 */
function createSafeTransaction(input, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, threshold, nonce, safeTxGas, data, safeTxHash, createdSafeTransaction;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        getSafeInfo(input.safe),
                        getSafeTransactionsBySafe(input.safe, { limit: 1 }),
                        getGasEstimation(input),
                    ])];
                case 1:
                    _a = _b.sent(), threshold = _a[0].threshold, nonce = _a[1][0].nonce, safeTxGas = _a[2];
                    data = {
                        safe: input.safe,
                        to: input.to,
                        value: input.value || '0',
                        data: input.data || ethers_1.ethers.constants.HashZero,
                        sender: ethers_1.ethers.utils.getAddress(input.sender),
                        confirmationsRequired: threshold,
                        safeTxGas: safeTxGas,
                        nonce: nonce + 1,
                        operation: 0,
                        baseGas: 0,
                        gasPrice: '0'
                    };
                    return [4 /*yield*/, getSafeTxHash(data)];
                case 2:
                    safeTxHash = _b.sent();
                    return [4 /*yield*/, submitSafeTransactionToService(__assign({ safeTxHash: safeTxHash }, data))];
                case 3:
                    createdSafeTransaction = _b.sent();
                    return [4 /*yield*/, approveSafeTransaction(createdSafeTransaction, signer)];
                case 4:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.createSafeTransaction = createSafeTransaction;
/**
 * Creates a reject transaction on Gnosis
 */
function createRejectTransaction(safeTransaction, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var signerAddress, data, safeTxHash, createdSafeTransaction;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, signer.getAddress()];
                case 1:
                    signerAddress = _a.sent();
                    data = {
                        safe: safeTransaction.safe,
                        to: safeTransaction.safe,
                        value: '0',
                        data: null,
                        operation: 0,
                        nonce: safeTransaction.nonce,
                        sender: ethers_1.ethers.utils.getAddress(signerAddress),
                        confirmationsRequired: safeTransaction.confirmationsRequired,
                        safeTxGas: 0,
                        baseGas: 0,
                        gasPrice: '0'
                    };
                    return [4 /*yield*/, getSafeTxHash(data)];
                case 2:
                    safeTxHash = _a.sent();
                    return [4 /*yield*/, submitSafeTransactionToService(__assign({ safeTxHash: safeTxHash }, data))];
                case 3:
                    createdSafeTransaction = _a.sent();
                    return [4 /*yield*/, approveSafeTransaction(createdSafeTransaction, signer)];
                case 4:
                    _a.sent();
                    return [2 /*return*/, createdSafeTransaction];
            }
        });
    });
}
exports.createRejectTransaction = createRejectTransaction;
/**
 * Executes a transaction acquired from getSafeTransaction
 * @param safeTransaction
 * @returns
 */
function executeSafeTransaction(safeTransaction, signer) {
    return __awaiter(this, void 0, void 0, function () {
        var refetched, err_3, signatures, safeContract;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, getSafeTransactionByHash(safeTransaction.safeTxHash)];
                case 1:
                    refetched = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_3 = _a.sent();
                    throw new Error("Error when fetching safe transaction from Gnosis: ".concat(err_3));
                case 3:
                    signatures = refetched.confirmations
                        .sort(function (a, b) { return (a.owner.toLowerCase() > b.owner.toLowerCase() ? 1 : -1); })
                        // eslint-disable-next-line
                        .reduce(function (acc, cur) { return (acc += cur.signature.replace('0x', '')); }, '0x');
                    safeContract = new ethers_1.ethers.Contract(safeTransaction.safe, GnosisSafe.abi, signer);
                    return [2 /*return*/, safeContract.execTransaction(refetched.to, refetched.value, refetched.data ? refetched.data : '0x', refetched.operation, refetched.safeTxGas, refetched.baseGas, Number(refetched.gasPrice), ethers_1.ethers.constants.AddressZero, // gasToken
                        ethers_1.ethers.constants.AddressZero, // refundReceiver
                        signatures, {
                            gasLimit: 2000000
                        })];
            }
        });
    });
}
exports.executeSafeTransaction = executeSafeTransaction;

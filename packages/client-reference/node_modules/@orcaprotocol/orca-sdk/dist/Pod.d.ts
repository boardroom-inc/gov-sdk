import { ethers } from 'ethers';
import Proposal from './Proposal';
/**
 * The `Pod` object is the interface for fetching pod data.
 *
 * The Pod object should not be instantiated directly, use {@link getPod} instead.
 *
 * The following properties are on the object itself:
 *
 * ```js
 * const {
 *   id, // Pod ID
 *   safe, // Gnosis safe address, aka the Pod address
 *   ensName, // E.g., orcanauts.pod.xyz
 *   admin, // Address of pod admin
 *   imageUrl, // Source of NFT image
 *   imageNoTextUrl, // Source of NFT image without text (used for avatars)
 * } = await getPod();
 * ```
 *
 * Members, EOAs and member Pods can be fetched with the following functions:
 *
 * ```js
 * const pod = await getPod(podAddress);
 * // Fetches list of all members from the pod, as an array of Ethereum addresses.
 * // This includes any pods that may be members of the original pods.
 * const members = await pod.getMembers();
 *
 * // Fetches any member EOAs (externally owned accounts). That is, any member that is not a smart contract or pod.
 * const memberEOAs = await pod.getMemberEOAs();
 *
 * // Fetches Pod objects for any member pods.
 * const memberPods = await pod.getMemberPods();
 * ```
 *
 * You can also check if a user is a member, admin, or member of those pods with the following functions:
 *
 * ```js
 * const pod = await getPod(podAddress);
 *
 * const isMember = await pod.isMember(userAddress);
 * // Not an async function
 * const isAdmin = pod.isAdmin(userAddress);
 *
 * const isAdminPodMember = await pod.isAdminPodMember(userAddress);
 *
 * // Includes both pods and users as sub pod members.
 * const isSubPodMember = await pod.isSubPodMember(userAddress);
 * ```
 */
export default class Pod {
    /**
     *  Note this constructor should not be called directly. Use `getPod()` instead.
     * @param identifier Can be either podId or safe address
     */
    constructor(identifier: string | number);
    controller: string;
    /** @property Pod ID */
    id: number;
    /** @property Gnosis Safe address */
    safe: string;
    /** @property Number of votes required to pass a proposal */
    threshold: number;
    /** @property ENS name */
    ensName: string;
    /** @property Admin address */
    admin: string;
    /** @property Link to Pod NFT image */
    imageUrl: string;
    /** @property Link to Pod NFT image with no text */
    imageNoTextUrl: string;
    /**
     * @ignore
     * @property Array of members of pod.
     * Do not call this property directly, use `Pod.getMembers()` */
    members?: string[];
    /**
     * @ignore
     * @property Array of member EOAs
     * Do not call this property directly, use `Pod.getMemberEOAs()`
     */
    memberEOAs?: string[];
    /**
     * @ignore
     * @property Array of Pod objects for any member pods
     * Do not call this property directly, use `Pod.getMemberPods()`
     */
    memberPods?: Pod[];
    /**
     * Returns an array of Proposal objects in reverse chronological order. Defaults to returning 5,
     * which can be overridden by passing { limit: 10 } for example in the options.
     *
     * By default, the first Proposal will be the active proposal. Queued proposals can be fetched
     * by passing { queued: true } in the options. This will return any queued proposals, as well any proposals
     * that follow (such as active or executed proposals)
     *
     * @param options
     * @returns
     */
    getProposals: (options?: {
        queued?: boolean;
        limit?: number;
    }) => Promise<Proposal[]>;
    /**
     * Returns of list of all member addresses.
     * Members include member pods and member EOAs
     */
    getMembers: () => Promise<string[]>;
    /**
     * @ignore
     * Populates the memberEOAs and memberPods fields.
     * The process for fetching either of these fields is the same.
     */
    populateMembers(): Promise<void>;
    /**
     * Returns list of all member EOAs, not including any smart contract/pod members.
     */
    getMemberEOAs: () => Promise<string[]>;
    /**
     * Returns Pod objects of all member pods.
     */
    getMemberPods: () => Promise<Pod[]>;
    /**
     * Checks if user is a member of this pod
     * @param address
     */
    isMember: (address: string) => Promise<boolean>;
    /**
     * Checks if user is admin of this pod
     * @param address
     */
    isAdmin: (address: string) => boolean;
    /**
     * Checks if given address is a member of the admin pod (if there is one)
     * Returns false if there is no admin pod.
     */
    isAdminPodMember: (address: string) => Promise<boolean>;
    /**
     * Checks if given address is a member of any subpods.
     *
     * Returns false if the user is a member of **this** pod, but not any sub pods
     *
     * @param address
     */
    isSubPodMember: (address: string) => Promise<boolean>;
    /**
     * Mints member to this pod.
     * @throws if signer is not admin TODO
     */
    mintMember: (newMember: string, signer: ethers.Signer) => Promise<ethers.providers.TransactionResponse>;
    /**
     * Burns member from this pod.
     * @throws If signer is not admin TODO
     */
    burnMember: (memberToBurn: string, signer: ethers.Signer) => Promise<ethers.providers.TransactionResponse>;
    /**
     * Transfers a membership from the signer's account to the memberToTransferTo.
     *
     * @param addressToTransferTo - Address that will receive new membership
     * @param signer - Signer of the address that is giving up membership
     * @throws If addressToTransferTo is already a member TODO
     * @throws If signer is not admin TODO
     */
    transferMembership: (addressToTransferTo: string, signer: ethers.Signer) => Promise<any>;
    /**
     * Transfers admin role from signer's account to addressToTransferTo
     * @param addressToTransferTo - Address that will receive admin role
     * @param signer - Signer of admin
     * @throws If signer is not admin
     */
    transferAdmin: (addressToTransferTo: string, signer: ethers.Signer) => Promise<any>;
    /**
     * Creates a proposal to mint a member to this pod
     * @param newMember
     * @param signer - Signer of pod member
     * @throws If new member is part of this pod.
     * @throws If signer is not part of this pod. TODO
     */
    proposeMintMember: (newMember: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Creates a proposal on an external pod to mint a new member to this pod.
     * @param externalPodIdentifier - The Pod object, pod ID or pod safe address of either the admin pod, or a subpod of this pod.
     * @param newMember - Member to mint
     * @param signer - Signer of external pod member
     * @throws If newMember is already part of this pod
     * @throws If externalPodIdentifier does not correlate to existing pod
     * @throws If externalPodIdentifier is not the admin or subpod of this pod
     * @throws If signer is not a member of external pod
     */
    proposeMintMemberFromPod: (externalPodIdentifier: Pod | string | number, newMember: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Creates a proposal to burn a member from this pod
     * @param memberToBurn - Member to remove from this pod
     * @param signer - Signer of pod member
     * @throws If memberToBurn is not part of this pod
     */
    proposeBurnMember: (memberToBurn: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Creates a proposal on an external pod to burn a new member from this pod.
     * @param externalPodIdentifier - The Pod object, pod ID or pod safe address of either the admin pod, or a subpod of this pod.
     * @param memberToBurn - Member to burn
     * @param signer - Signer of external pod member
     * @throws If memberToBurn is not part of this pod
     * @throws If externalPodIdentifier is not an existing pod
     * @throws If externalPodIdentifier is not the admin or subpod of this pod
     * @throws If Signer is not a member of the external pod
     */
    proposeBurnMemberFromPod: (externalPodIdentifier: Pod | string | number, memberToBurn: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Creates a proposal to transfer membership from a subpod
     * @param subPodIdentifier - Pod, Pod ID or safe address
     * @param addressToTransferTo - Address that will receive the membership
     * @param signer - Signer of subpod member
     * @throws If addressToTransferTo is already a member of this pod
     * @throws If subPodIdentifier does not exist
     * @throws If Signer is not a member of this sub pod
     */
    proposeTransferMembershipFromSubPod: (subPodIdentifier: Pod | string | number, addressToTransferTo: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Creates proposal to transfer the admin role from the admin pod
     * @param adminPodIdentifier - Pod ID, safe address, or ENS name of admin pod
     * @param addressToTransferTo - Address that will receive admin roll
     * @param signer - Signer of admin pod member
     * @throws If addressToTransferTo is already the pod admin
     * @throws If adminPodIdentifier does not exist
     * @throws If adminPodIdentifier is not the admin of this pod
     * @throws If Signer is not a member of the admin pod
     */
    proposeTransferAdminFromAdminPod: (adminPodIdentifier: Pod | string | number, addressToTransferTo: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Adds newAdminAddress as the admin of this pod, if this pod does not currently have an admin.
     * @param newAdminAddress - Address of new admin
     * @param signer - Signer of pod member
     * @throws If pod already has an admin
     */
    proposeAddAdmin: (newAdminAddress: string, signer: ethers.Signer) => Promise<void>;
    /**
     * Migrates the pod to the latest version. Signer must be the admin of pod.
     * @param signer - Signer of pod admin
     * @throws If signer is not pod admin TODO
     */
    migratePodToLatest: (signer: ethers.Signer) => Promise<any>;
    /**
     * Creates a proposal to migrate the pod to the latest version.
     * @param signer - Signer of pod member
     * @throws If signer is not a pod member TODO
     */
    proposeMigratePodToLatest: (signer: ethers.Signer) => Promise<void>;
}

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.getAdminPods = exports.getUserPods = exports.getPod = exports.config = exports.init = void 0;
var axios_1 = __importDefault(require("axios"));
var ethers_1 = require("ethers");
var Pod_1 = __importDefault(require("./Pod"));
var config_1 = require("./config");
exports.init = config_1.init;
exports.config = config_1.config;
var utils_1 = require("./lib/utils");
/**
 * Gets a pod object.
 *
 * @param identifier - Pod ID (as number), safe address, or ENS name
 */
function getPod(identifier) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Pod_1["default"](identifier)];
        });
    });
}
exports.getPod = getPod;
/**
 * Fetches an array of Pod objects that a user is a member of
 *
 * @param address - user address
 */
function getUserPods(address) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var data, pods, unsortedPods;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    try {
                        ethers_1.ethers.utils.getAddress(address);
                    }
                    catch (_c) {
                        throw new TypeError("Invalid address provided to getUserPods: ".concat(address));
                    }
                    return [4 /*yield*/, axios_1["default"].post(config_1.config.subgraphUrl, {
                            query: "query GetUserPods($id: ID!) {\n        user(id: $id) {\n          pods {\n            id\n            pod {\n              id\n            }\n          }\n        }\n      }",
                            variables: { id: address.toLowerCase() }
                        })];
                case 1:
                    data = (_b.sent()).data;
                    pods = (((_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.user) || { pods: [] }).pods;
                    unsortedPods = pods.map(function (_a) {
                        var pod = _a.pod;
                        return parseInt(pod.id, 10);
                    });
                    return [2 /*return*/, Promise.all(unsortedPods.map(function (pod) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, new Pod_1["default"](pod)];
                        }); }); }))];
            }
        });
    });
}
exports.getUserPods = getUserPods;
/**
 * Gets an array of Pod objects that a user is the admin of
 * @param address - user address
 */
function getAdminPods(address) {
    return __awaiter(this, void 0, void 0, function () {
        var data, adminPods;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    (0, utils_1.checkAddress)(address);
                    return [4 /*yield*/, axios_1["default"].post(config_1.config.subgraphUrl, {
                            query: "query GetUserPods($id: ID!) {\n        user(id: $id) {\n          adminPods\n        }\n      }",
                            variables: { id: address.toLowerCase() }
                        })];
                case 1:
                    data = (_a.sent()).data;
                    adminPods = (data.data.user || { adminPods: [] }).adminPods;
                    return [2 /*return*/, Promise.all(adminPods.map(function (pod) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, new Pod_1["default"](parseInt(pod, 10))];
                        }); }); }))];
            }
        });
    });
}
exports.getAdminPods = getAdminPods;

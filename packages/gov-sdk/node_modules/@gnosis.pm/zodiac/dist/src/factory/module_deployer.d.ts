import { ethers, Contract, Signer } from "ethers";
import { ABI } from "hardhat-deploy/dist/types";
import { KnownContracts } from "./types";
declare type TxAndExpectedAddress = {
    transaction: {
        data: string;
        to: string;
        value: ethers.BigNumber;
    };
    expectedModuleAddress: string;
};
/**
 * Get the transaction for deploying a module proxy through the module factory.
 * This will also initialize the module proxy by calling the setup function.
 *
 * @param moduleName Name of the module to deploy (must be present in `KnownContracts`)
 * @param setupArgs The arguments for the setup function of the module
 * @param provider
 * @param chainId
 * @param saltNonce
 * @returns the transaction and the expected address of the module proxy
 */
export declare const deployAndSetUpModule: (moduleName: KnownContracts, setupArgs: {
    types: Array<string>;
    values: Array<any>;
}, provider: ethers.providers.JsonRpcProvider, chainId: number, saltNonce: string) => TxAndExpectedAddress;
/**
 * Get the transaction for deploying a module proxy through the module factory.
 * This will also initialize the module proxy by calling the setup function.
 *
 * This method is for modules that do not have a mastercopy listed in the `KnownContracts`
 * @param mastercopyAddress address of the mastercopy to use
 * @param abi abi of the module
 * @param setupArgs The arguments for the setup function of the module
 * @param provider
 * @param chainId
 * @param saltNonce
 * @returns the transaction and the expected address of the module proxy
 */
export declare const deployAndSetUpCustomModule: (mastercopyAddress: string, abi: ABI, setupArgs: {
    types: Array<string>;
    values: Array<any>;
}, provider: ethers.providers.JsonRpcProvider, chainId: number, saltNonce: string) => TxAndExpectedAddress;
export declare const calculateProxyAddress: (moduleFactory: Contract, mastercopyAddress: string, initData: string, saltNonce: string) => string;
export declare const getModuleInstance: (moduleName: KnownContracts, moduleAddress: string, provider: ethers.providers.JsonRpcProvider | Signer) => ethers.Contract;
export declare const getModuleFactoryAndMasterCopy: (moduleName: KnownContracts, provider: ethers.providers.JsonRpcProvider, chainId: number) => {
    moduleFactory: ethers.Contract;
    moduleMastercopy: ethers.Contract;
};
export {};

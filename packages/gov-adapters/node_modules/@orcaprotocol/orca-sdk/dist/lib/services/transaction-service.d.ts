import { ethers } from 'ethers';
export interface SafeTransaction {
    safe: string;
    to: string;
    sender?: string;
    operation?: number;
    value?: string;
    data?: string;
    dataDecoded?: {
        method: string;
        parameters: Array<{
            name: string;
            type: string;
            value: string;
        }>;
    };
    nonce?: number;
    safeTxGas?: number;
    safeTxHash?: string;
    transactionHash?: string;
    baseGas?: number;
    confirmations?: Array<Confirmation>;
    confirmationsRequired?: number;
    gasPrice?: string;
    executionDate?: string;
    submissionDate?: string;
    blockNumber?: number;
    isExecuted?: boolean;
    isSuccessful?: boolean;
    origin?: string;
}
export interface Confirmation {
    owner: string;
    submissionDate: string;
    transactionHash?: string;
    signature: string;
    signatureType: string;
}
export interface Safe {
    address: string;
    nonce: number;
    threshold: number;
    owners: string[];
    masterCopy: string;
    modules: string[];
    fallbackHandler: string;
    guard: string;
    version: string;
    isOrcaEnabled?: boolean;
    isPod?: boolean;
    hasToken?: boolean;
}
/**
 * Decodes transaction given an ABI and the data and parses it to match Gnosis's dataDecoded field
 * @param abi
 * @param data
 * @returns
 */
export declare function parseTransaction(abi: any, data: string): {
    method: string;
    parameters: Array<{
        name: string;
        type: string;
        value: string;
    }>;
};
/**
 * Populates the "dataDecoded" field of a transaction, if one does not exist.
 * @param transaction
 */
export declare function populateDataDecoded(safeTransaction: SafeTransaction): Promise<SafeTransaction>;
/**
 * Gets safe info from transaction service.
 *
 * @param address - Address of the Safe.
 * @returns - Safe data.
 */
export declare function getSafeInfo(address: string): Promise<Safe>;
/**
 * Gets the gas estimation for a given transaction.
 *
 * @param transaction - Transaction object.
 * @returns - Gas
 */
export declare function getGasEstimation(transaction: SafeTransaction): Promise<number>;
/**
 * Asks the transaction service what the real transaction should be. Feeding an
 * incorrect transaction hash to the service has it spit back the real one.
 *
 * NOTE: This isn't really safe, we should look into asking the contract later.
 *
 * @param transaction - Transaction object that is missing a contractTransactionHash.
 * @returns - Safe transaction hash.
 */
export declare function getSafeTxHash(transaction: SafeTransaction): Promise<string>;
/**
 * Submits a new transaction to the transaction-service.
 *
 * @param {string} safeAddress - Address of Safe.
 * @param {Transaction} transaction - Transaction object received from populateTransaction.
 * @returns
 */
export declare function submitSafeTransactionToService(transaction: SafeTransaction): Promise<SafeTransaction>;
/**
 * Adds a confirmation/signature to an existing transaction (see submitTransactionToService).
 *
 * @param contractTransactionHash - ...
 * @param signedMessage - ...
 * @returns - Confirmed transaction.
 */
export declare function addConfirmationToSafeTransaction(contractTransactionHash: string, signedMessage: string): Promise<any>;
/**
 * Gets transactions for a safe.
 *
 * @param address - Address of the Safe.
 * @param [params] - Query params.
 * @returns - Array of transactions for the Safe.
 */
export declare function getSafeTransactionsBySafe(address: string, params?: Record<string, unknown>): Promise<SafeTransaction[]>;
/**
 * Gets a transaction from the transaction service.
 *
 * @param contractTransactionHash
 * @returns - Safe transaction object.
 */
export declare function getSafeTransactionByHash(contractTransactionHash: string): Promise<SafeTransaction>;
/**
 * Approves transaction and submits approval to transaction-service
 * @param safeTransaction {SafeTransaction}
 * @param signer {ethers.Signer}
 */
export declare function approveSafeTransaction(safeTransaction: SafeTransaction, signer: ethers.Signer): Promise<any>;
/**
 * Creates safe transaction
 * @param input.safe - Address of Gnosis safe
 * @param input.to - Smart contract address (i.e., MemberToken)
 * @param input.value - Value to send
 * @param input.data - Transaction data
 * @param input.sender - Address that is initiating the transaction
 * @returns {SafeTransaction}
 */
export declare function createSafeTransaction(input: {
    safe: string;
    to: string;
    value?: string;
    data?: string;
    sender: string;
}, signer: ethers.Signer): Promise<void>;
/**
 * Creates a reject transaction on Gnosis
 */
export declare function createRejectTransaction(safeTransaction: SafeTransaction, signer: ethers.Signer): Promise<SafeTransaction>;
/**
 * Executes a transaction acquired from getSafeTransaction
 * @param safeTransaction
 * @returns
 */
export declare function executeSafeTransaction(safeTransaction: SafeTransaction, signer: ethers.Signer): Promise<any>;
